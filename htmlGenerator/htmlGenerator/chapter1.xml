<?xml version="1.0" encoding="utf-8" ?>
<Documentation>
	<Chapter>
		<Id>1</Id>
		<Title>什么是 Office Apps</Title>
		<Name>what-is-office-addin</Name>
		<Url></Url>
		<Sections>
			<Section>
				<Id>1</Id>
				<Title>Office Apps 简介</Title>
				<Name>office-addin-introduction</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>Office 平台</Title>
						<Paragraph><![CDATA[
						传统的微软 Office 办公软件包括PC端的Excel、Outlook、PowerPoint、Project、Word、Access等应用，
						此外微软还开发了基于Web的Excel、Outlook、PowerPoint、Word应用，用户可以随时随地使用浏览器访问并使用Office。
						移动平台上的Office产品也日趋完善，不同程度地覆盖了安卓，苹果和 Windows/Windows Phone 系统的移动设备。
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>Office 平台中的App</Title>
						<Paragraph><![CDATA[
						Office 2013 以后，微软为包括您在内的 Office 平台上的开发者提供了一种开发App的新模型，它允许您在 Office 应用程序中创建一个区域，这个区域可以来展现网页与文档的交互以及附加功能内容。
						您可以将高度定制化的 Web 应用或服务集成在 Office 中，并且使之在整个 Office 平台上可用。
						应用程序实际上并没有安装在运行 Office 的计算机上；其实现托管在您指定的 Web 服务器上，因此，您可以轻松地从该服务器对它进行维护和更新。
						]]>
						</Paragraph>
						<Paragraph><![CDATA[
						例如，您可以针对Word开发词典应用，词典应用显示在Word文档中，用户在编辑文档时不再需要再切换到翻译软件或浏览器。
						除此之外，您可以利用Office平台提供的JavaScript API在词典应用中与当前文档进行交互，如读取或写入数据，将文档以PDF形式下载等等。
						当词典应用被部署（到您指定的 Web 服务器上）并发布后， 用户可在Word 2013 （富客户端）、Word Online中插入并使用该词典应用。
						通过 Office Apps平台，您可以创建能够吸引新用户和企业的 Office 客户端应用程序。
						]]>
						</Paragraph>
						<Paragraph><![CDATA[
						利用 Web 和标准 Web 技术（如 HTML5、XML、CSS3、JavaScript 和 REST API，以及诸如 ASP 、PHP 等服务器端脚本语言）的强大功能，您可以创建与 Office 文档、电子邮件、会议请求、约会甚至任何提供 REST API 的其他数据源进行交互的应用程序。			
						Office 2013中的OfficeApp平台支持三种应用（应用也称为AddIn,也就是外接程序）类型：Office 任务面板(任务窗格外接程序)、Office 内容应用（内容外接程序）以及Office 邮件应用（邮件外接程序）。
						]]>
						</Paragraph>
						<Paragraph><![CDATA[
						<img class="featurette-image img-responsive center-block" src="../assets/images/office_addin_app_types.png">
						<br>几类App举例：<br><br>
						<div class="row placeholders">
						  <div class="col-xs-6 col-sm-3 col-md-6">
							<img class="img-responsive" src="../assets/images/office_addin_app_type_taskpane_example.jpg">
							<h4>Office 任务面板应用</h4>
							<span class="text-muted"></span>
						  </div>
						  <div class="col-xs-6 col-sm-3 col-md-6">
							<img class="img-responsive" src="../assets/images/office_addin_app_type_incontent_example.jpg">
							<h4>Office 内容应用</h4>
							<span class="text-muted"></span>
						  </div>
						  <div class="col-xs-6 col-sm-3 col-md-6">
							<img class="img-responsive" src="../assets/images/office_addin_app_type_outlook_example.jpg">
							<h4>Office 邮件应用</h4>
							<span class="text-muted"></span>
						  </div>
						</div>
						<br>
						下面通过实例介绍最终用户如何插入并使用 Office Apps。
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>演示：在 Excel 2013 中使用App</Title>
						<Paragraph><![CDATA[
						<!-- START THE FEATURETTES -->
						<div class="row featurette">
						  <div class="col-md-4">
							<h4 class="featurette-heading demostep">1. 用Excel 2013创建一个新文档</h4>
							<p class="lead">创建一组表格数据：第一列是姓名，第二列是对应每个人的数字（比如说这些数字表示每个人在银行中的存款。），如右图。</p>
						  </div>
						  <div class="col-md-8">
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel.png">
						  </div>
						</div>

						<hr class="featurette-divider">

						<div class="row featurette">
						  <div class="col-md-4 col-md-push-8">
							<h4 class="featurette-heading demostep">2. 打开Office商店，查找People GraphApp。</h4>
							<p class="lead">People Graph基于OfficeApp平台开发，并发布在微软Office商店中，用户可以随时随地的将它安装到自己的Office文档中，利用其对文档中选中的数据做可视化处理。
							  注意：需要在安装界面中点击Trust It，完成安装。
							</p>
						  </div>
						  <div class="col-md-8 col-md-pull-4">
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel_2.png">
						  </div>
						</div>

						<hr class="featurette-divider">

						<div class="row featurette">
						  <div class="col-md-4">
							<h4 class="featurette-heading demostep">3. 选择数据并将其可视化</h4>
							<p class="lead">
							  点击“选择数据”之后，会出现操作提示。
							</p>
						  </div>
						  <div class="col-md-8">
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel_3.png">
							<br>
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel_4.png">
							<br>
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel_5.png">
						  </div>
						</div>
						  
						<hr class="featurette-divider">

						<div class="row featurette">
						  <div class="col-md-4 col-md-push-8">
							<h4 class="featurette-heading demostep">4. 为这组数据的选择合适的图形。</h4>
							  <p class="lead">
								这里选择美元图形。用户可以复制生成的图像，用在其他文档中。
							  </p>
						  </div>
						  <div class="col-md-8 col-md-pull-4">
							<img class="featurette-image img-responsive center-block" src="../assets/images/demo_use_office_app_in_excel_6.png">
						  </div>
						</div>
						<hr class="featurette-divider">
						<!-- /END THE FEATURETTES -->
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="http://www.ithome.com/html/office/21208.htm" target="_blank">真相图：Office2013插件扩展平台Agaves抢先看</a></td>
							</tr>
							<tr>
							  <td><a href="http://indianexpress.com/article/technology/technology-others/build-2015-microsoft-office-to-become-platform-outlook-gets-uber-paypal-inbuilt/#sthash.udZzJm8u.dpuf" target="_blank">Build 2015: What Microsoft announced for Office and Outlook.com</a></td>
							</tr>
							<tr>
							  <td><a href="https://channel9.msdn.com/Events/Build/2015/2-616" target="_blank">Office Development Matters, and Here's Why...</a></td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
		
			<Section>
				<Id>2</Id>
				<Title>创建第一个 Office App —— "Hello World" 应用</Title>
				<Name>start-with-hello-world-in-napa</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>准备工作</Title>
						<Paragraph><![CDATA[
						开发 Office Apps基本等同于开发常见的 Web 应用程序，App实际运行内嵌于 Office 平台上的 iframe 中。
						<br>
						您可以将 Web 应用的开发体验无缝地迁移到 Office Apps开发中：
						<ul>
							<li>通过 JavaScript 和成熟框架（如 jQuery） 实现交互式 UI 和自定义逻辑；</li>
							<li>利用 HTTP 协议和 AJAX 异步编程技术调用相应数据源的 REST API 或其他 Web 服务；</li>
							<li>使用服务器端脚本语言（如 ASP 或 PHP）实现，这些语言运行于服务器端；</li>
							<li>利用 HTML5 、CSS3 优化网页表现和布局。</li>
						</ul>
						
						接下来，我们通过一个简单的例子来介绍如何开发 Office Apps。
						您可通过如下两种开发环境开发 Office App：
						<ul>
							<li>在已安装 Office 2013 （富客户端）和 Visual Studio 2012 （或更新版本）的 PC 机上进行开发。</li>
							<li>使用 Office 365 网页版开发工具（<a href="https://www.napacloudapp.com/"target="_blank">Napa</a>）进行开发 - 无需安装任何客户端软件，需要 Microsoft 帐户登录。</li>
						</ul>
						这里我们采用第二种方式进行开发，如果您还没有注册 Microsoft 账号，请点击<a href="http://windows.microsoft.com/zh-CN/windows-live/sign-up-create-account-how" target="_blank">此处</a>注册。
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>使用 Napa 创建并调试一个 Office 内容应用 - Hello World</Title>
						<Paragraph>
              <![CDATA[
						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">1. 打开 Napa</h4>
						  <p class="lead">通过点击上述链接，并用 Microsoft 账号登录，进入 Napa 开发工具。</p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_napastart.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-3 col-md-push-9">
						  <h4 class="featurette-heading demostep">2. 创建一个 Office 内容应用。</h4>
						  <p class="lead">
						  点击“添加新的项目”，并输入项目名称，选择“Office 内容应用”， 点击“创建”。
						  </p>
						</div>
						<div class="col-md-9 col-md-pull-3">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_createnewcontentaddin.png"">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">3. 点击“运行项目”，等待响应</h4>
						  <p class="lead">
						  创建完新的内容应用项目后，Napa自动添加了简单的测试程序，您只需点击“运行项目”，等待程序部署。
						  </p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runhellowworld.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-4 col-md-push-8">
						  <h4 class="featurette-heading demostep">4. 允许浏览器弹出新的窗口显示 Web 版的Excel 页面，如图所示，App 类似于图表一样“浮在”上面。</h4>
						  <p class="lead">
						  由于这个由您创建的 App 是首次插入在这个 Excel 文档中，在 App 启动之前会告知用户： 这是新的 Office App，如果您选择启动，它将对此文档的内容具有访问权限...。
              另外还会告诉用户这个 App 的发布者是谁。用户需要点击“开始”才能使用此 App。
						  </p>
						</div>
						<div class="col-md-8 col-md-pull-4">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runninghelloworld.png">
						</div>
						</div>
						<hr class="featurette-divider">

						<div class="row featurette">
						<div class="col-md-4 col-md-push-8">
						  <h4 class="featurette-heading demostep">5. 点击“开始”后，App 启动如图所示。</h4>
						  <p class="lead">
						  <b>理论上</b>您可以选择 Excel 中的部分文字，然后点击 “Get data from selection”，此时， App会将您选取的部分中的数据显示在 App 内，而 App 中用来取得 Excel 选中部分文字的 API 就是 Office 平台提供的 JSOM （Office.js) 提供。
              您可以在本文档系列的第二章《Office 文档操作 API》中详细了解 Office 平台对不同的 Office 软件（Word， Excel，PowerPoint，...)提供的 API 支持。
              然而，由于处于调试阶段，打开的 Excel 文档也处于只读的状态，所以您也无法添加新的数据进行测试（尴尬 o(>﹏<)o）。
						  </p>
						</div>
						<div class="col-md-8 col-md-pull-4">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runninghelloworld_success.png">
						</div>
						</div>
						<hr class="featurette-divider">

						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">6. 接下来我们来看看这个内容应用项目包含的文件。</h4>
						  <p class="lead">
						  其中 Home.html是这个 App 启动的首页面（当然， 我们可以根据需要在 App 的 Manifest 中设定首页面，将在后面介绍）。
              另外也像其他 Web 应用程序一样，您可以任意添加 js，css，html，图片等等网页元素（不局限于静态的 Web 编程技术，也可以使用 php 等运行于服务端的语言）。
						  </p>
              <p class="lead">
              另外，您可以看到 Home.html 中引用了 https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js ，这正是 Office 平台提供的用于和文档交互的 JSOM API。
              </p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_projectfiles_intro.png">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_projectfiles_intro2.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						<!-- /END THE FEATURETTES -->
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="https://msdn.microsoft.com/ZH-CN/library/office/jj220082.aspx" target="_blank">Office 相关应用程序概述</a></td>
							</tr>
							<tr>
							  <td><a href="https://msdn.microsoft.com/zh-cn/library/office/jj220060.aspx" target="_blank">Office 相关应用程序</a></td>
							</tr>
							<tr>
							  <td>
								<a href="http://blogs.msdn.com/b/jasonz/archive/2012/07/17/introducing-napa-office-365-development-tools.aspx" target="_blank">Introducing “Napa” - Office 365 Development Tools</a>
							  </td>
							</tr>
							<tr>
							  <td>
								<a href="http://blogs.msdn.com/b/officeapps/archive/2013/08/27/use-napa-office-365-development-tools-to-build-apps-for-office-and-sharepoint-on-the-browser.aspx" target="_blank">Use “Napa” Office 365 Development Tools to build apps for Office and SharePoint on the browser</a>
							  </td>
							</tr>
							<tr>
							  <td>
								<a href="http://www.zdnet.com/article/microsofts-napa-tools-for-building-apps-for-the-new-office-sharepoint/" target="_blank">Microsoft's 'Napa': Tools for building apps for the new Office, SharePoint</a>
							  </td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
		
			<Section>
				<Title>Visual Studio 开发 Office 内容面板应用</Title>
				<Name>start-with-hello-world-in-visual-studio</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>准备工作</Title>
						<Paragraph><![CDATA[
						上一节中提到，您可通过如下两种开发环境开发 Office App：
						<ul>
							<li>在已安装 Office 2013 （富客户端）和 Visual Studio 2012 （或更新版本）的 PC 机上进行开发。</li>
							<li>使用 Office 365 网页版开发工具（<a href="https://www.napacloudapp.com/"target="_blank">Napa</a>）进行开发 - 无需安装任何客户端软件，需要 Microsoft 帐户登录。</li>
						</ul>
						这里我们用 Visual Studio 进行开发，在这之前需要在本机上安装 Office 2013 客户端。
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>使用 Visual Studio 创建并调试一个 Office 内容面板应用 - Hello World</Title>
						<Paragraph>
              <![CDATA[
						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">1. 打开 Visual Studio </h4>
						  <p class="lead">通过点击上述链接，并用 Microsoft 账号登录，进入 Napa 开发工具。</p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_napastart.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-3 col-md-push-9">
						  <h4 class="featurette-heading demostep">2. 创建一个 Office 内容应用。</h4>
						  <p class="lead">
						  点击“添加新的项目”，并输入项目名称，选择“Office 内容应用”， 点击“创建”。
						  </p>
						</div>
						<div class="col-md-9 col-md-pull-3">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_createnewcontentaddin.png"">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">3. 点击“运行项目”，等待响应</h4>
						  <p class="lead">
						  创建完新的内容应用项目后，Napa自动添加了简单的测试程序，您只需点击“运行项目”，等待程序部署。
						  </p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runhellowworld.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						
						<div class="row featurette">
						<div class="col-md-4 col-md-push-8">
						  <h4 class="featurette-heading demostep">4. 允许浏览器弹出新的窗口显示 Web 版的Excel 页面，如图所示，App 类似于图表一样“浮在”上面。</h4>
						  <p class="lead">
						  由于这个由您创建的 App 是首次插入在这个 Excel 文档中，在 App 启动之前会告知用户： 这是新的 Office App，如果您选择启动，它将对此文档的内容具有访问权限...。
              另外还会告诉用户这个 App 的发布者是谁。用户需要点击“开始”才能使用此 App。
						  </p>
						</div>
						<div class="col-md-8 col-md-pull-4">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runninghelloworld.png">
						</div>
						</div>
						<hr class="featurette-divider">

						<div class="row featurette">
						<div class="col-md-4 col-md-push-8">
						  <h4 class="featurette-heading demostep">5. 点击“开始”后，App 启动如图所示。</h4>
						  <p class="lead">
						  <b>理论上</b>您可以选择 Excel 中的部分文字，然后点击 “Get data from selection”，此时， App会将您选取的部分中的数据显示在 App 内，而 App 中用来取得 Excel 选中部分文字的 API 就是 Office 平台提供的 JSOM （Office.js) 提供。
              您可以在本文档系列的第二章《Office 文档操作 API》中详细了解 Office 平台对不同的 Office 软件（Word， Excel，PowerPoint，...)提供的 API 支持。
              然而，由于处于调试阶段，打开的 Excel 文档也处于只读的状态，所以您也无法添加新的数据进行测试（尴尬 o(>﹏<)o）。
						  </p>
						</div>
						<div class="col-md-8 col-md-pull-4">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_runninghelloworld_success.png">
						</div>
						</div>
						<hr class="featurette-divider">

						<div class="row featurette">
						<div class="col-md-4">
						  <h4 class="featurette-heading demostep">6. 接下来我们来看看这个内容应用项目包含的文件。</h4>
						  <p class="lead">
						  其中 Home.html是这个 App 启动的首页面（当然， 我们可以根据需要在 App 的 Manifest 中设定首页面，将在后面介绍）。
              另外也像其他 Web 应用程序一样，您可以任意添加 js，css，html，图片等等网页元素（不局限于静态的 Web 编程技术，也可以使用 php 等运行于服务端的语言）。
						  </p>
              <p class="lead">
              另外，您可以看到 Home.html 中引用了 https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js ，这正是 Office 平台提供的用于和文档交互的 JSOM API。
              </p>
						</div>
						<div class="col-md-8">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_projectfiles_intro.png">
						  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_hello_world_projectfiles_intro2.png">
						</div>
						</div>
						
						<hr class="featurette-divider">
						<!-- /END THE FEATURETTES -->
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="#" target="_blank">links</a></td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
			
			<Section>
				<Id>3</Id>
				<Title>Office Apps 类型及平台支持</Title>
				<Name>office-addin-types-and-current-platoform-supporting</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>Office Apps 类型</Title>
						<Paragraph><![CDATA[
						Office Apps平台支持三种应用（应用也称为AddIn,也就是外接程序）类型：Office 任务面板(任务窗格外接程序)、Office 内容应用（内容外接程序）以及Office 邮件应用（邮件外接程序）。
						<!-- START THE FEATURETTES -->
						  <div class="row featurette">
							<div class="col-md-8">
							  <h4 class="featurette-heading demostep">1. 任务面板应用</h4>
							  <p class="lead">
							  任务面板应用显示在 Office 文档的一侧，
							  可用来增强文档的查看或创作体验，例如实现 Word 文档内的
							  Wikipedia词典(<a href="https://store.office.com/wikipedia-WA104099688.aspx?assetid=WA104099688&sourcecorrid=5bb9341a-fbae-40ad-b7fc-720f019bf7bf&searchapppos=0" target="_blank">点击查看</a>)、
							  代码格式化助手 Code Format
							  （<a href="https://store.office.com/code-format-WA104379501.aspx?assetid=WA104379501&sourcecorrid=30244dbf-a408-4a36-b627-8cd3369ba93b&searchapppos=0" target="_blank">点击查看</a>）等应用。
							  </p>
							</div>
							<div class="col-md-4">
							  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_apptype_supporting_taskpne_pic.png" alt="Generic placeholder image">
							</div>
						  </div>
						
						  <hr class="featurette-divider">
			
						  <div class="row featurette">
							<div class="col-md-8 col-md-push-4">
							  <h4 class="featurette-heading demostep">2. 内容应用</h4>
							  <p class="lead">
								放置在 Office 文档中的任意位置,此类应用可以丰富文档或基于浏览器的 Access 数据库的内容。
								例如之前我们看到的用来实现数据可视化的 People Graph (<a href="https://store.office.com/people-graph-WA104104476.aspx?assetid=WA104104476&sourcecorrid=f9eef6a3-1866-49b2-83ab-1198f8b06ae2&searchapppos=0" target="_blank">点击查看</a>)。
							  </p>
							</div>
							<div class="col-md-4 col-md-pull-8">
							  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_apptype_supporting_content_pic.png" alt="Generic placeholder image">
							</div>
						  </div>
			
						  <hr class="featurette-divider">
			
						  <div class="row featurette">
							<div class="col-md-8">
							  <h4 class="featurette-heading demostep">3. 邮件应用</h4>
							  <p class="lead">
								显示在邮件正文的上方，可用来实现与邮件相关的应用。
								例如，FedEx 包裹追踪
								（<a href="https://store.office.com/package-tracker-WA104162083.aspx?assetid=WA104162083&sourcecorrid=dbfb4afd-709f-4888-83ba-456619ab07eb&searchapppos=15" target="_blank">点击查看</a>）
								可根据邮件中存在的快递号，查询包裹详情，用户不需要切换到浏览器登录 FedEx 官网进行查询。
								<br>
								邮件应用适用的用户场景:
								<ul>
									<li>最终用户需要在查看或撰写电子邮件和约会时，使用 Office Apps</li>
									<li>需要根据邮件上下文决定是否应该显示邮件应用入口。
									例如，当发现邮件正文中有地址信息时，才显示地图邮件应用入口，用户点击入口后，邮件应用启动，并将匹配到的地址信息显示在地图上。</li>
									<li>应用程序不仅在台式机上可用，而且在平板电脑或智能手机上也可用</li>
								</ul>
								目前，如果您的邮箱搭建在 Exchange Server 上，则可为 Outlook 富客户端、Outlook Web App 和 适用于设备的 OWA 创建邮件应用程序。
								<span style="color:red">需要确认，是否同一app可在这些平台上运行？</span>
								在邮件应用中，通过检测邮件的上下文信息（例如，用户正停留在撰写邮件界面、特定邮件类型、是否存在附件、地址信息、任务建议、会议建议、邮件和约会正文中某些字符串模式匹配）
								，来决定是否应该在该邮件中显示此邮件应用入口。
							  </p>
							</div>
							<div class="col-md-4">
							  <img class="featurette-image img-responsive center-block" src="../assets/images/how_to_develop_office_addin_apptype_supporting_email_pic.png" alt="Generic placeholder image">
							  </div>
						  </div>
						  
						  <hr class="featurette-divider">
						  <!-- /END THE FEATURETTES -->
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>目前三种 Apps类型在 Office 平台上的支持</Title>
						<Paragraph><![CDATA[
						下表总结了不同 Office 软件对三种App类型的支持情况，当然，将来会有越来越多的 Office 软件能够支持App。
						</br>
						<table class="table table-striped">
						<thead>
						  <tr>
						    <th>Office 软件类型</th>
							<th>Office 软件</th>
							<th>是否支持任务窗格应用程序</th>
							<th>是否支持内容应用程序</th>
							<th>是否支持邮件应用程序</th>
						  </tr>
						</thead>
						<tbody>
						  <tr>
						    <td rowspan="5">Office PC 富客户端版本</td>
							<td>Word 2013 或更高版本</td>
							<td>是</td>
							<td>否</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Excel 2013 或更高版本</td>
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>PowerPoint 2013 或更高版本</td>	
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Project 2013 或更高版本</td>
							<td>是</td>
							<td>否</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Outlook 2013 或更高版本</td>
							<td>否</td>
							<td>否</td>
							<td>是</td>
						  </tr>
						  <tr>
						    <td rowspan="5">Office Web 版应用程序</td>
							<td>Word Online</td>
							<td>是</td>
							<td>否</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Excel Online</td>
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>PowerPoint Online</td>
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Access Web 应用程序</td>
							<td>否</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Outlook Web 应用程序</td>
							<td>否</td>
							<td>否</td>
							<td>是</td>
						  </tr>
						  <tr>
						    <td rowspan="4">Office RT 版应用程序</td>
							<td>Word RT</td>
							<td>是</td>
							<td>否</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Excel RT</td>
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>PowerPoint RT</td>
							<td>是</td>
							<td>是</td>
							<td>否</td>
						  </tr>
						  <tr>
							<td>Outlook RT</td>
							<td>否</td>
							<td>否</td>
							<td>是</td>
						  </tr>
						  <tr>
						    <td rowspan="1">Office Mac 版应用程序</td>
							<td>Outlook for Mac</td>
							<td>否</td>
							<td>否</td>
							<td>是</td>
						  </tr>
						  <tr>
						    <td rowspan="1">OWA for Devices 
								<br><p style="color:red;font-size: 9px;">
								OWA与Outlook Web 版应用的区别，
								<br>会在这里更新。</p>
							</td>
							<td>适用于设备的 OWA</td>
							<td>否</td>
							<td>否</td>
							<td>是</td>
						  </tr>
						</tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="http://www.office365tipoftheday.com/2013/11/16/owa-for-devices/" target="_blank">OWA for Devices</a></td>
							</tr>
							<tr>
							  <td><a href="http://baike.baidu.com/view/970770.htm" target="_blank">Outlook Web Access简称OWA是基于微软Hosted Exchange技术的托管邮局的一项Web访问功能</a></td>
							</tr>
							<tr>
							  <td>
								<a href="https://community.office365.com/en-us/w/mobile/owa-for-iphone-and-owa-for-ipad" target="_blank">OWA for iPhone and OWA for iPad</a></td>
							</tr>
							<tr>
							  <td>
								<a href="hhttps://msdn.microsoft.com/zh-cn/library/office/jj220077.aspx" target="_blank">开发 Office 相关应用程序</a>
							  </td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
		
			<Section>
				<Title>比较 Office Add-In Model, VBA 和 VSTO </Title>
				<Name>compare-office-addin-with-vba-and-vsto</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>三种扩展 Office 软件功能的开发模型对比 – Office Add-In Model, VBA 和 VSTO </Title>
						<Paragraph><![CDATA[
当 Office 用户需要针对文档自定义新功能时，可以求助于 VBA 或者 VSTO 两种方式。
Office 2013 富客户端以后，微软为 Office 平台上的开发者提供了一种新模型 --- Office Add-In Model，它允许在 Office 应用程序中创建一片区域，并在这片区域中展现网页与文档的交互。开发者可以将高度定制化的 Web 应用或服务集成在 Office 中，使之在整个 Office 平台上可用。 应用程序实际上并没有安装在运行 Office 的计算机上，而是托管在开发者所指定的 Web 服务器上，因此，可以轻松地从该服务器对它进行维护和更新。
现在到处都是社交网络、移动设备、各种各样的云服务以及实时的文档协作，新的模型正致力于将 Office 与 Web 技术和资源衔接起来。
				
对于开发者而言，无论是 VBA、VSTO，还是新的 Office Add-In Model，只要可以解决实际问题，可以选择任何一种方式实现。而如果要开发新的扩展功能，可以优先考虑 Office Add-In Model 实现，因为这种方式有其独有的优势。下面，我们逐一介绍三种开发模型的优劣，让大家清楚什么时候适宜选择什么样的方案。
						]]>
						</Paragraph>
						<Paragraph><![CDATA[
						如果您不了解 VBA 或者 VSTO，可通过下面的介绍简单了解，并体会其与新 App Model 的区别。
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>Office Add-In Model</Title>
						<Paragraph><![CDATA[
<p>
【部署方式多样化】使用这种方式开发的扩展功能，称之为 Office Add-In， 微软为这类 Add-In  提供了统一的发布商店 --- Microsoft Office Store。这可以最大化的减少不同公司、不同部门针对相似业务的重复投资，使所有的 Office 用户在不同的 Office 平台（ 主要有富客户端、web版 Office、RT 版 Office等）使用优质的Office 自定义扩展功能。另外， Office Store 还允许开发者对自己发布的Office Add-In收费，这无疑为优质的Add-In开发者带来了商机。另外，微软还允许开发者将开发的 Add-In 部署在本地共享文件夹中或者SharePoint App Catalog上，这样只有局域网或者本公司的人才可以在 Office 软件中使用该Add-In。在发布和传播上， 显然新的Add-In Model走在了VBA、VSTO的前面。

【学习成本更低】开发Office Add-In，更多是利用现今流行的Web开发技术，对于开发者（尤其是已经熟知Web 技术的从业人员）而言，学习和开发Office Add-In的成本也大大降低。开发者甚至可以利用已经存在的web 服务或者网站快速构建出一个Office Add-In。

【维护和更新更加容易】基于 VBA 和 VSTO 的 扩展功能，它们运行在本地的 Office 软件并依赖于相应的平台支持（如 VSTO 依赖于 Office 软件提供的主互操作程序集，诸如Microsoft.Office.Interop.Excel.dll）。 然而当 Office 软件或一些平台支持不一致时，会出现同一个脚本或应用在不同的机器上表现不同，甚至是不支持。 新的 Add-In Model下开发的Add-In， 由于本质上是运行在 Office 平台（包括2013及以后的富客户端，Web 版， RT版，甚至是 Mac版）上嵌入的的 iframe 中， 而 Add-In 本身是被开发者 host 在远端的 Web 服务器上。 Add-In 开发者可以根据情况快速的更新 App 的功能或者修正 bug。

由于这个模型刚刚起步，在Office功能的自定义上稍显不足，更多地强调可以在Office中衔接Web技术。

</p>
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>利用VSTO 构建Office扩展功能</Title>
						<Paragraph><![CDATA[
<p>
VSTO（也就是Visual Studio Tools for Office） 是一套用于创建自定义Office应用程序的Visual Studio工具包。VSTO借助于 .NET Framework去自定义和扩展 Office的功能。 VSTO 全面支持 C# 和Visual Basic 语言, 因此可以利用 .Net Framework 中常用的开发模型、工具和方法。VSTO 允许开发出的功能与Office 客户端程序紧密整合，不管是在使用的 APIs 上还是针对用户操作接口的自定义上。
</p>
<div class="row featurette">
	<div class="col-md-4">
	  <h4 class="featurette-heading demostep"></h4>
	  <p class="lead">
		如下图所示的是一个PowerPoint 中的 VSTO solution，它实现了一个自定义的Ribbon（上侧红框）、基于 Windows Presentation Foundation实现的任务面板（右侧红框）和浮动的Windows Form窗口。
		</p>
	</div>
	<div class="col-md-8">
	  <img class="featurette-image img-responsive center-block" src="../assets/images/compare_with_vba_and_vsto_examples_built-upon_vsto.png" alt="Generic placeholder image">
	</div>
</div>
<p>
利用 VSTO 开发时，开发者在 Visual Studio 中利用各种模板创建针对Excel/Outlook/InfoPath/Project/PowerPoint的扩展应用程序。利用模板创建新的 Office 项目后，Visual Studio 会添加对生成该项目所需的主互操作程序集（简称PIA） 的引用，比如说 Microsoft.Office.Interop.Excel.dll。 在某些情况下，你可能需要添加对其他 PIA 的引用（例如，如果你希望在 Microsoft Office Excel 项目中使用 Microsoft Office Word 的功能）。 MSDN 中列出了可用于 Office 2013 和 Office 2010 的 主互操作程序集。

当需要高度自定义Office功能或者针对Office 2007、2010及以下版本的富客户端开发扩展功能时，VSTO将是最好的选择。

基于VSTO的solution，其部署和更新依赖于各个企业的IT部门。另外，由于VSTO允许高度的自定义化，其运行需要和其他桌面程序一样的权限，因此可以访问文件系统，或与其他软件通信，所以IT部门或者用户个人需要自己衡量所要安装的VSTO solution 是否安全可靠。

</p>

<p><b>关于 VSTO 的更多细节：</b></p>
<p>
VSTO（Visual Studio Tools for Office ）是 VBA 的替代，使开发 Office 应用程序更加简单。
另外，使用 VSTO 来开发 Office 应用程序的开发者可以利用 Visual Studio 开发环境中的强大功能和 CLR 提供的内存管理，垃圾回收等功能，大大地提高开发效率。
</p>
<p>
VSTO 是一套用于创建自定义Office应用程序的Visual Studio工具包。
VSTO 使开发者可以用 Visual Basic 或者 Visual C# 扩展 Office 应用程序(例如Word、Excel、InfoPath和Outlook)的功能，
同时允许开发者直接利用Visual Studio开发环境来创建自定义程序。无论你是创建简单的数据录入应用程序还是复杂的企业解决方案，VSTO都使之变得容易。
VSTO还提供了增强的Office对象，开发者提供了更大的文档操作支持。例如，可以直接在Excel电子表格或者Word文档上添加.NET控件，也被称为 Windows Forms 控件，然后把数据直接绑定到控件上。
</p>
<p>
利用 VSTO 开发时，开发者在 Visual Studio 中利用各种模板创建项目，如下图所示。其中有针对Excel的外接程序(Add-Ins)，也有针对 Outlook 的外接程序。
<hr class="featurette-divider">

<div class="row featurette">
	<div class="col-md-12">
	  <img class="featurette-image img-responsive center-block" src="../assets/images/vsto-office-addins-templates.png" alt="Generic placeholder image">
	</div>
</div>

<hr class="featurette-divider">
<p>
使用 VSTO 生成外接程序时，您会创建一个由 Microsoft Office 应用程序加载的托管代码程序集（managed code assembly）。 
加载了程序集之后，外接程序可以响应在 Office 应用程序中引发的事件（例如，用户单击菜单项时引发的事件）。 
外接程序也可以调入对象模型以便实现App程序的目的，并且它可以使用 .NET Framework 中的任何类。
托管代码程序集通过 Office 应用程序的主互操作程序集（PIA）与 Office 应用程序进行交互（基于 COM 的对象模型）。
</p>
<p>
创建新的 Office 项目时，Visual Studio 会添加对生成该项目所需的 PIA 的引用，例如下述代码中的 Microsoft.Office.Interop.Excel.dll。 在某些情况下，你可能需要添加对其他 PIA 的引用（例如，如果你希望在 Microsoft Office Excel 项目中使用 Microsoft Office Word 的功能）。
MSDN 中列出了可用于 Office 2013 和 Office 2010 的 <a href="https://msdn.microsoft.com/zh-cn/library/15s06t57.aspx" target="_blank">主互操作程序集</a>。

<p>
<pre>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
// Microsoft Excel 对象库
using Excel = Microsoft.Office.Interop.Excel;
using Office = Microsoft.Office.Core;
using Microsoft.Office.Tools.Excel;

namespace ExcelAddIn1
{
	public partial class ThisAddIn
	{
		private void ThisAddIn_Startup(object sender, System.EventArgs e)
		{
		}

		private void ThisAddIn_Shutdown(object sender, System.EventArgs e)
		{
		}

		#region VSTO generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InternalStartup()
		{
			this.Startup += new System.EventHandler(ThisAddIn_Startup);
			this.Shutdown += new System.EventHandler(ThisAddIn_Shutdown);
		}
		
		#endregion
	}
}

</pre>
</p>
						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>VBA</Title>
						<Paragraph><![CDATA[
<p>
VBA 是用来自动化Office 客户端软件内操作的工具。由于这项技术植根于 Visual Basic 6, 并在 Word和Excel中提供了宏录像(macro recorder)的支持, VBA 为自动化Office文档内的任务提供了可能。 不过由于历史久远, VBA 更多的是提供UI上的自定义上和整体上对工具框架的支持。

VBA脚本可以存储分布在Office 文档中，这使得脚本的初次发布和传播比较容易，但是当文档通过邮件或其他方式广泛的传播和复制后，如果需要对脚本进行更改，就会变得非常麻烦。另外，VBA脚本可以做成应用程序级别的，不与特定的文档相关，这时则需要每个使用它的用户正确的安装到特定的目录下。

Office 取得巨大成功的一个重要原因就是 VBA，使用VBA可以完成很多事情，基于Excel、Word的VBA小程序不计其数。 VBA 的语言入门门槛较低，而这些用户利用 VBA 解决的正式工作中关键问题。因此，VBA 程序大多作为部门内部或个人使用的小工具。
</p>
<p><b>关于 VBA 的更多细节：</b></p>
<p>
Visual Basic for Applications（简称VBA）是一种宏语言，由微软公司开发，可用来实现在微软桌面应用程序环境下的通用自动化(OLE)任务。
主要能用来扩展 Windows 的应用程序功能，特别是针对 Microsoft Office 软件。
微软在 1994 年发行的 Excel 5.0 版本中，即具备了 VBA 的宏功能。
VBA 使可编程应用软件得到完美的实现，它作为一种通用的宏语言可被所有的微软可编程应用软件所共享。
在Office 2000 中，宏语言 VBA 适用于所有应用程序，包括 Word 、 Excel、PowerPoint、Access、Outlook 以及Project。
</p>
<p>
VBA 是基于 Visual Basic for Windows 发展而来的，它与传统的宏语言不同，传统的宏语言不具有高级语言的特征，没有面向对象的程序设计概念和方法。
而VBA 提供了面向对象的程序设计方法，提供了相当完整的程序设计语言。
VBA 易于学习掌握，可以使用宏记录器记录用户的各种操作并将其转换为VBA 程序代码。
这样用户可以容易地将日常工作转换为VBA 程序代码，使工作自动化。
因此，对于在工作中需要经常使用Office 套装软件的用户，学用VBA 有助于使工作自动化，提高工作效率。
另外，由于VBA 可以直接应用Office 套装软件的各项强大功能，所以对于程序设计人员的程序设计和开发更加方便快捷。
</p>
<p>由于微软 Office 软件的普及，用户可在 Word、Excel、Access、Powerpoint 中利用 VBA 编写自定义的代码来扩展 Office 软件的功能，从而提升效率。
例如：通过一段VBA代码，可以实现画面的切换或者实现复杂逻辑的统计等。
Office 取得巨大成功的一个重要原因就是 VBA，使用VBA可以完成很多事情，基于Excel、Word的VBA小程序不计其数。
VBA 的语言入门门槛较低，而这些用户利用 VBA 解决的正式工作中关键问题。因此，VBA 程序大多作为部门内部或个人使用的小工具。
</p>
						]]>
						</Paragraph>
					</SubSection>	
					<SubSection>
						<Title>另外</Title>
						<Paragraph><![CDATA[
<p>下表列出了微软官方对 Office 平台开发中涉及到概念的最新命名： </p>
<table class="table table-striped">
  <thead>
  	<tr><th>原名</th><th>新名称</th><th>适用于</th></tr>
  </thead>
  <tbody>
	<tr>
	  <td>apps for Office</td>
	  <td>Office Add-ins</td>
	  <td>Office 2013 及 更新版本 （ 2013 app model）</td>
	</tr>
	<tr>
	  <td>mail app for Outlook</td><td>Outlook Add-in</td><td>Office （2013 app model）</td>
	</tr>
	<tr>
	  <td>app for Excel</td><td>Excel Add-in</td><td>Office （2013 app model）</td>
	</tr>
	<tr>
	  <td>app for PowerPoint</td><td>PowerPoint Add-in</td><td>Office （2013 app model）</td>
	</tr>
	<tr>
	  <td>app for Word</td><td>Word Add-in</td><td>Office （2013 app model）</td>
	</tr>
	<tr>
	  <td>Office App Model</td><td>Office Add-in Model</td><td>Office （2013 app model）</td>
	</tr>
	<tr>
	  <td>apps for SharePoint</td><td>SharePoint Add-ins</td><td>SharePoint (SharePoint 2013 app model)</td>
	</tr>
	<tr>
	  <td>SharePoint App Model</td><td>SharePoint Add-in Model</td><td>SharePoint (SharePoint 2013 app model)</td>
	</tr>
	<tr>
	  <td>app part</td><td>add-in part</td><td>SharePoint (SharePoint 2013 app model)</td>
	</tr>
	<tr>
	  <td>app web</td><td>add-in web</td><td>SharePoint (SharePoint 2013 app model)</td>
	</tr>
  </tbody>
</table>
<p>
 为了防止使用过 VSTO 的开发者将新的 Add-In Model 与 以前的 Office Add-In 概念混淆，在 Office Developer Tools for Visual Studio 中（也就是用于在 Visual Studio 中创建 Office 扩展程序的项目模板）, 将老一代的基于 VSTO 实现的 Add-In 称为 VSTO Add-In；把新的 Model 下的 Add-In 称为 Web Add-In：
</p>
<table class="table table-striped">
  <thead>
  	<tr><th>项目模板类型</th><th>描述</th><th>举例</th></tr>
  </thead>
  <tbody>
	<tr>
	  <td>Office Web Add-ins</td>
	  <td>Add-ins based on the web technologies provided by the new Office Add-in Model.
		基于 Web 技术的 2013 app model
	  </td>
	  <td>Excel Web Add-in</td>
	</tr>
	<tr>
	  <td>Office VSTO Add-ins</td>
	  <td>Add-ins based on managed code technologies built with Visual Studio Tools for Office (VSTO).
	  </td>
      <td>Excel 2013 VSTO Add-in</td>
	</tr>
	<tr>
	  <td>Office COM Add-ins</td>
	  <td>Add-ins based on COM and VBA technology that extend applications by adding custom commands and specialized features.</td>
	  <td>Excel 2013 COM Add-in</td>
	</tr>
  </tbody>
</table>
						]]>
						</Paragraph>
					</SubSection>					
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="http://baike.baidu.com/link?url=6XT-4wjK0jqOcyG2GK769PhcP6vhZufcWpXm9bmP_xypjgexxnoNQNzv61QfljOXObH_pFCmPhYT_LlThYbSZKjF_Pcwd4uu6RoeNq_o97O" target="_blank">VBA（Visual Basic宏语言）- 百度百科</a></td>
							</tr>
							<tr>
							  <td><a href="http://baike.baidu.com/link?url=9_iy3UIHwVXad5l4hNICptJHJC4c5F4NxKKn0uKpyF-po7SCH7nJ0BxYkER3wnQP04kHnAoaGxBLSXIHibIH7_" target="_blank">VSTO - 百度百科</a></td>
							</tr>
							<tr>
							  <td><a href="https://msdn.microsoft.com/zh-cn/library/bb386298.aspx#HowAddinsWork" target="_blank">应用程序级外接程序的体系结构</a></td>
							</tr>
							<tr>
							  <td><a href="https://msdn.microsoft.com/zh-cn/library/15s06t57.aspx" target="_blank">Office 主互操作程序集</a></td>
							</tr>
							<tr>
							  <td><a href="http://blogs.msdn.com/b/officeapps/archive/2013/06/18/roadmap-for-apps-for-office-vsto-and-vba.aspx" target="_blank">Roadmap for Apps for Office, VSTO, and VBA</a></td>
							</tr>
							<tr>
							  <td><a href="https://msdn.microsoft.com/en-us/library/fp161507.aspx#bk_newname" target="_blank">New names for apps for Office and SharePoint</a></td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
		
			<Section>
				<Title>Office Apps的数据源</Title>
				<Name>office-addin-data-sources</Name>
				<Url></Url>
				<Content>
					<SubSection>
						<Title>Office 文档</Title>
						<Paragraph><![CDATA[

						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>Office 365 API</Title>
						<Paragraph><![CDATA[

						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>其他 REST API</Title>
						<Paragraph><![CDATA[

						]]>
						</Paragraph>
					</SubSection>
					<SubSection>
						<Title>相关链接</Title>
						<Paragraph><![CDATA[
						<table class="table table-striped">
						  <tbody>
							<tr>
							  <td><a href="#" target="_blank">links</a></td>
							</tr>
						  </tbody>
						</table>
						]]>
						</Paragraph>
					</SubSection>
				</Content>
			</Section>
		</Sections>
	</Chapter>
</Documentation>